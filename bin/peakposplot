#! /usr/bin/env python
#! /usr/bin/env casarun
#
#    example to present the peak positions of each channel in a cube
#    in a plot that scales the intensity at each peak with a circle
#    Right now depends on either cubestats (so the .bin is created)
#    or a new cubestats_nemo, so the new ccdstat has written the
#    new column 
#
import numpy as np
import matplotlib.pyplot as plt

try:
    from astropy.table import Table
except:
    print 'No astropy'


try:
    import atable
except:
    print 'No admit'

try:
    import aplot
except:
    print 'No aplot'

#

gamma = 0.75
rmax  = 5

Qbin = True
#Qbin = False

if Qbin:
    pppfile = "cubestats-ppp.bin"
    print "Using ",pppfile
    # needs:
    # ['channel', 'frequency', 'maxposx', 'maxposy', 'max']
    t = atable.ATable().pload(pppfile)
    print t.names
    i = t.get('max')
    c = t.get('channel')
    x = t.get('maxposx')
    y = t.get('maxposy')
else:
    pppfile = "ccdstat.tab"
    print "Using ",pppfile
    #  from maxpos=t
    t = Table.read(pppfile,format='ascii')
    if True:
        # if properly labeled
	i = t['max']
	c = t['iz']
	x = t['maxposx']
	y = t['maxposy']
    else:
        # only maxpos=t is allowed here
	i = t['col4']
	c = t['col1']
	x = t['col12'] 
	y = t['col13']

if True:
    smax = 10
    gamma = 0.75
    print "New aplot.scatter"
    z0 = i/i.max()
    s = np.pi * ( smax * (z0**gamma) )**2
    aplot.APlot().scatter(x,y,s=s,c=c)
else:

    z1 = i/i.max()
    z2 = np.sqrt(z1)
    z3 = np.sqrt(z2)
    z4 = z1**gamma

    a1 = np.pi * (z1*rmax)**2 
    a2 = np.pi * (z2*rmax)**2 
    a3 = np.pi * (z3*rmax)**2 
    a4 = np.pi * (z4*rmax)**2
    print 'A4 range:',a4.min(),a4.max()

    fig = plt.figure()

    ax1 = fig.add_subplot(2,2,1)
    ax1.scatter(x, y, s=a1, c=c, alpha=0.5)
    ax1.set_title('PeakPosPlot  k=1 rmax=%g' % rmax)

    ax2 = fig.add_subplot(2,2,2)
    ax2.scatter(x, y, s=a2, c=c, alpha=0.5)
    ax2.set_title('k=1/2')

    ax3 = fig.add_subplot(2,2,3)
    ax3.scatter(x, y, s=a3, c=c, alpha=0.5)
    ax3.set_title('k=1/3')

    ax4 = fig.add_subplot(2,2,4)
    ax4.scatter(x, y, s=a4, c=c, alpha=0.5)
    ax4.set_title('k=%g' % gamma)



    fig.savefig('PeakPosPlot-1.png')
    plt.show()
    fig.savefig('PeakPosPlot-2.png')



