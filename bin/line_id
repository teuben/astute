#! /usr/bin/env python
#
# casapy script, with some external MIRIAD and NEMO example calls
# To run this:
#     casapy --nogui -c $ASTUTE/bin/getdata
#
# it would be useful to find out if there is some "import casa" style,
# so you don't have to run this from within casapy?
#

#   from astute
import astute, alines, parfile
import sys, os

#    set defaults
vlsr  = 236.999
vcube = [-50,550]  
pv = [[234,380],[415,256]] 

#    setup environment, grab parameters
a = astute.Astute()
p = parfile.ParFile()

#    grab pipeline parameters
vlsr  = p.getf('vlsr') 
#vcube = p.getf('vcube')
#pv    = p.getf('pvslice')

#    set parameters
f_im   = 'im'
f_pv   = 'PV'

#  cheat , or use slsearch() later on, or try datasplat
print 'LINES.LIST: ',a.resolve('$TAS/etc/n253_lines.list')
(freq,line) = alines.read_cheat_lines(a.resolve('$TAS/etc/n253_lines.list'))


#    do work
h = imhead(f_im,mode='list')
naxis = h['shape']
naxis3 = naxis[2]
crval3 = h['crval3']/1e9
cdelt3 = h['cdelt3']/1e9
crpix3 = h['crpix3'] + 1     #  note CASA does 0 based here

[freq0,freq1] = alines.axis_range(naxis3, crval3, cdelt3, crpix3)
freq0_0 = alines.f_rest(vlsr,freq0)
freq1_0 = alines.f_rest(vlsr,freq1)
print "Range in sky  freq:",freq0,freq1
print "Range in rest freq:",freq0_0,freq1_0," for vlsr=",vlsr
slsearch(logfile="slines.list",verbose=True,freqrange=[freq0_0,freq1_0])
alines.edit_slines_doppler("slines.list",vlsr)
fp = open("mlines.list","w")
nlines = 0
for i in range(len(freq)):
   # see if doppler shifted line in this spw
   f = alines.f_doppler(vlsr,freq[i])
   if alines.in_range(f, naxis3, crval3, cdelt3, crpix3):
      nlines = nlines + 1
      fp.write("%f %s\n" % (freq[i],line[i]))
      l_out = "L_"+line[i]
      imsubimage(f_im,l_out,overwrite=True,chans="range=[%gkm/s,%gkm/s], restfreq=%gGHz" % (vcube[0],vcube[1],freq[i]))
      imreframe(l_out,restfreq='%gGHz' % freq[i])
      # figure out the RMS at this freq by interpolating from a smooth RMS(freq) graph
      # from cubestats
      # then use excludepix=[-2,2]
      immoments(l_out,outfile=l_out+"/MOM0")
      h0 = imstat(l_out+"/MOM0")
      print "in_range: ",f,"(",line[i],"@",freq[i],")"," Peak/Flux/RMS=",h0['max'],h0['flux'],h0['rms']
      exportfits(l_out+"/MOM0",l_out+"/MOM0.fits",velocity=True)
print "Identified %d lines (still faking it)" % nlines
fp.close()
impv(f_im,f_pv,pv[0],pv[1],overwrite=True)
exportfits(f_pv,f_pv+'.fits',overwrite=True)

