#! /usr/bin/env casarun
#
# casapy script
#
# To run this:
#     casapy --nogui -c $ASTUTE/bin/getdata
#
# it would be useful to find out if there is some "import casa" style,
# so you don't have to run this from within casapy?
#

#   from astute
import astute, parfile
import sys, os
import numpy as np   
#
try:
    from astropy.table import Table
except:
    print "no astropy"

import atable


#    report
print "@ASTUTE: cubestats"

#    setup, grab parameters
a = astute.Astute()
p = parfile.ParFile()

#    set parameters

if p.has('in'):
    c_im = p.get('in')
else:
    c_im = 'im/cim'


#    debug
print "ARGV: ",sys.argv

use_astropy = False
use_pickle  = True
use_ppp     = False

c1 = 'max'
c2 = 'sigma'
c3 = 'medabsdevmed'
s  = '|'
new1 = '\n#|int|double|real|real|\n#||Ghz|Jy/beam|Jy/beam|'

print "casa::imstat(%s)" % c_im
stats = imstat(c_im,axes=[0,1],logfile='imstat.logfile',append=False)

# strange we need to do it this way.. imstat::s doesn't have them, the logfile does
# instead, we'll grab it from imhead()
h = imhead(c_im,mode='list')
n = h['shape'][2]
p = h['crpix3']
d = h['cdelt3']
v = h['crval3']
ch = np.arange(n) + 1
fr = (ch-p-1)*d + v
col_names = (s+'channel',s+'frequency',s+c1,s+c2,s+c3+s+new1)
col_data = [ ch, fr, stats[c1], stats[c2], stats[c3]] 
if use_astropy:
    t = Table(col_data, names=col_names, copy=True)
    # t.write('imstat.astropy.tab',format='ascii')
    t.write('imstat.astropy.tab',format='ascii.commented_header')
    # now read the logfile as a table
if use_pickle:
    col_names = ['channel','frequency'] + [c1,c2,c3]
    at = atable.ATable(col_data, col_names)
    at.pdump('cubestats.bin')
    # at.plotter(fr/1e9,[stats[c2]],'CubeStats')

# ascii.commented_header
# header_start


#   this is an expensive operation, since maxpos in not computed per
#   plane in casa, only whole cube, do the work ourselves
if use_ppp:
    # n= number of channels
    xpos = np.arange(n)
    ypos = np.arange(n)
    for i in range(n):
	if i%10==0: print i
	s = imstat(c_im,chans='%d'%i)
	xpos[i] = s['maxpos'][0]
	ypos[i] = s['maxpos'][1]
    at = atable.ATable([ch,fr,xpos,ypos,stats[c1]],['channel','frequency','maxposx','maxposy','max'])
    at.pdump('peakpospoint.bin')
