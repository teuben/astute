#! /usr/bin/env casarun
#-*- mode: python -*-
#
#  testing a piece of an ADMIT pipeline
#  it depends on having run 'getdata' in for example 'w_1_c'  (n253 benchmark)
#
#  e.g.
#      cd $ASTUTE/data
#      mkdir w_1_c  
#      cd w_1_c
#      pipesetup project=w_1_c
#      getdata
#      test1                                      (ideally just this script)
#      /usr/bin/python $ASTUTE/bin/test1          (currently needed [sic] unless you fix tcl/tk link)
#
#      in "mkcd $CASAPATH/lib/casapy/lib"  :   ln -s ../../../share/tcl8.4 ; ln -s ../../../share/tk8.4
#                               
#      Running it via 'casarun' solved this problem.

import sys,os

import admit1 as admit
import AT_summary      as at0
import AT_cubestats    as at1
import AT_cubespectrum as at2
import AT_moments      as at3
import AT_linelist     as at4
import AT_linecube     as at5


def try1a(mode=999):
    _debug = True
    mcrit=0
    print "TRY1a"
    #  start a new ADMIT
    a = admit.ADMIT("TRY1a")

    #  b0 is the BDP that simply contains the FITS file we're working on
    b0 = admit.BDP_file('fits')               
    a0 = admit.AT_file([],[b0])      
    a0.run()
    a.add(b0) 

    # this should really be the importfits, but we bypass that for now. 
    b1 = admit.BDP_file('cim')                
    a1 = admit.AT_flow([b0],[b1])
    a1.run()
    a.add(b1) 

    # 1
    if mode>mcrit:
        mcrit=mcrit+1
        b1s = admit.BDP_summary('summary')
        a1s = at0.AT_summary([b1],[b1s])
        #a1s.set('verbose=0')
        a1s.run()
        a.add(b1s) 

    # 2
    if mode>mcrit:
        mcrit=mcrit+1
        b2 = admit.BDP_cubestats('cubestats')
        a2 = at1.AT_cubestats([b1],[b2])             
        a2.run()
        a.add(b2) 

    # 3
    if mode>mcrit:
        mcrit=mcrit+1
        # for now, if you give 2 BDP's it has to be a cubestats
        # in which the mean,sigma,max,maxpos for the cube was recorded as well
	b3 = admit.BDP_cubespectrum('cubespectrum')
        a3 = at2.AT_cubespectrum([b1,b2],[b3])             
	a3.run()
        a.add(b3)
    
    # 4
    if mode>mcrit:
        mcrit=mcrit+1
        b5 = admit.BDP_image('linelist')
        a5 = at4.AT_linelist([b1,b2],[b5])
        a5.set('csigma=-1')
        a5.set('f=1.0')
        a5.run()
        a.add(b5)

    # 5
    if mode>mcrit:
        mcrit=mcrit+1
        b61 = admit.BDP_image('linecube')
        b6 = [b61]
        a6 = at5.AT_linecube([b1,b5],b6)
        a6.run()
        nlines = len(b6)
        print "Found %d linecubes" % nlines
        for i in range(nlines):
            a.add(b6[i])

    # 6
    if mode>mcrit:
        mcrit=mcrit+1
        b60 = range(nlines)
        b61 = range(nlines)
        b62 = range(nlines)
        a60 = range(nlines)
        for i in range(nlines):
            lname = b6[i].filename 
            b60[i] = admit.BDP_image(lname + '.mom0')
            b61[i] = admit.BDP_image(lname + '.mom1')
            b62[i] = admit.BDP_image(lname + '.mom2')
            a60[i] = at3.AT_moments([b6[i]],[b60[i],b61[i],b62[i]])
            a60[i].set('moments=0,1,2')
            a60[i].run()
            a.add(b60[i])
            a.add(b61[i])
            a.add(b62[i])
    # 7 
    if False:
        mcrit=mcrit+1
	a0.pdump()
	a1.pdump()
	a2.pdump()
	a3.pdump()

    a.pdump()
    print "END mcrit=%d" % mcrit

if __name__ == "__main__":
    # get the bare args
    argv = admit.casa_argv(sys.argv)
    print argv
    if len(argv) > 1:
        mode = int(argv[1]) 
        print "Trying mode %d" % mode
        try1a(mode)
    else:
        try1a()
