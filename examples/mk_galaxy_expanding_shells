#! /bin/csh -f
#
#  populate an exponential disk with a set of clusters (as fractionally virialized
#  plummer spheres) for a range of shapes and masses, but following some 
#  size-linewidth relation
#  
#  20-jul-2012  (43rd moon landing anniversary!)     Peter Teuben
#   3-may-2013  cloned from mk_galaxy_clumpy

#  root name of files, and mode of running
set run     = run000
#  1=start by creating snapshot
#  2=start with the gridding
set mode    = 1

#  number of clusters
set nc      = 500
#  number of points per cluster
set nppc    = 10000
#  fraction of plummer to use
set mfrac   = 0.5
#  disk exponential scale length (alpha = 1/scale_length)
set alpha   = 4.0
#  cutoff radius of the disk
set rcut    = 1.5
#  relative heat of the clusters (circular rotation seems more appropriate)
set Qtoomre = 0.0
#  thickness of disk
set z0      = 0.01
#  inclination of disk
set inc     = 60
#  size range of clusters
set r0      = 0.05
set r1      = 0.5
set virial  = 0.5
# 
set debug   = 0 
#  gridding
set nxy     = 512
set nz      = 256
set beam    = 0.01


# ===========================================================================

foreach arg ($*)
  set $arg
end

# 0) start with a clean slate in case previous run
#    and set some derived variables

if ($mode == 1) then
   rm -rf $run.*
endif

if ($mode == 2) goto gridding


# 1) create an exponential disk where the clusters are going to be
#
mkexpdisk $run.1 $nc alpha=$alpha rcut=$rcut \
    Qtoomre=$Qtoomre z0=$z0 zerocm=f
snapprint $run.1 > $run.2

# 2) create a small plummer sphere for each point in the disk, and
#    accumulate that in a final big snapshot file ($run.4)
echo "Creating $nc clusters of $nppc particles each ($run.4)"
echo "# i     pos(3)  vel(3)    radius" > $run.2a
foreach i (`seq $nc`)
  echo -n .
  set pv=(`getline $run.2 $i`)
  #  @todo: set random size and mass, then virialize
  set r=`nemoinp "ranu($r0,$r1)" seed=-1`

  #  @todo mass always same ??
  set ms=`nemoinp 1/$nc`
  set rs=`nemoinp $r`
  set vs=`nemoinp "sqrt(1/$nc/$r)"`

  echo $i $pv $r >> $run.2a

  if ($i == 1) then
    set items=SnapShot,History
  else
    set items=SnapShot
  endif

  mkconfig - $nppc |\
    snapspin  - - 1.0 outflow=t |\
    snapscale - - mscale=$ms rscale=$rs vscale=$virial |\
    snapshift - - $pv[1],$pv[2],$pv[3]  $pv[4],$pv[5],$pv[6] |\
    csf - - $items debug=-1 >> $run.4
end
echo ""

# 3) merge the snapshot and rotate it to be viewed along a given inclination
#
echo "Merge and Rotate ($run.5)"
snapmerge $run.4 - |\
  snaprotate - $run.5 $inc x

gridding:

# 4) grid and view the snapshot in a variety of ways
#
echo "Gridding ($run.7)  nxy=$nxy  nz=$nz beam=$beam"
rm -f $run.6* $run.7*
snapgrid $run.5 $run.6a nx=$nxy ny=$nxy moment=0 svar=$beam
snapgrid $run.5 $run.6b nx=$nxy ny=$nxy moment=1 svar=$beam
snapgrid $run.5 $run.7  nx=$nxy ny=$nxy nz=$nz zrange=-2:2
echo "Smoothing ($run.7b)"
ccdsmooth $run.7 $run.7a dir=xyz nsmooth=1
ccdsmooth $run.7 $run.7b dir=xyz nsmooth=2
echo "Slicing ($run.7c)"
ccdslice $run.7b $run.7c y
echo "Moments ($run.8x)"
rm -rf $run.8*
ccdmom $run.7b $run.8a axis=3 mom=0
ccdmom $run.7b $run.8b axis=3 mom=1
ccdmom $run.7b $run.8c axis=3 mom=2
ccdmom $run.7b $run.8d axis=3 mom=3
ccdrt  $run.7b $run.8e peak=f
ccdrt  $run.7b $run.8f peak=t
