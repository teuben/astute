
More details on design for ADMIT                                   (Aug 26, 2013)
================================

High level design:   (+ means it's been transferred to xmldesign.tex, 
     	   	        don't start adding more here)

+ ADMIT runs a series of commands, which are essentially beefed up
  casa tools/tasks. ADMIT provides a wrapper around them (much like
  each casa task has a "foobar.xml" and "task_foobar.py" file) but with 
  some extra baggage to make it fit within the pipeline and have a
  persistent state (within the pipeline as well for re-use by the user
  later on).
  Users will be able to re-run selected portions of the ADMIT pipeline
  from either the (casa) commandline, or a (casa) GUI, and compare
  and improve upon the pipeline produced results.
  Meta-projects can be defined, and ADMIT be used to steer and control
  how to run on individual projects and sources, after which selected
  results can be datamined 

- Nomenclature:

  MP = meta project
  P = project
  S = source (NS=1, but can be >1)n
  B = band (NB=4 for ALMA)
  L = line (NL can be large)
  C = continuum (NC=1 or 0)
  
  For ALMA a project (P) is archived, which can contains multiple sources (S),
  and each source will have a number (4?) of bands's (B), each of which contains
  a (band)cube that we analyse. So,per project we have NB*NS cubes to deal with.

- Breakdown:

xml definition -- the tags, the structure of the tags,
    one or many files, restricted tags, user created
    tags, is there a dictionary with attributes?
    Marc volunteered to work on this part.

    Note:  within a project we have to allow for
    many sources as well as bands.  In the first "astute"
    environment, we had each source/band in a different
    working directory, which certainly as far as bands
    go, is not a good idea, as it won't easily allow

    The XML file is a container that holds :
     - top level description of the project/source
       (ra,dec,vlsr,spectral axes etc.etc.)
     - derived descriptions: line descriptions
     - data such as :  line cubes, moment maps
     - ADMIT procedure state (parameter settings)



xml i/o and manipulation layer -- this is to standardize
    the interaction with the xml for all higher level
    routine and to enable and simplity the xml stucture
    that we decide upon in the xml definitions
    Marc and Peter might meet on this level -- from the
    xml definitions below and the python layer above...




python layer -- the layer that enables the interaction with
    CASA and the pipeline. And.... what else?
    [peter]

    First of all, we need to distinguish between casa tools and 
    tasks.  The V0.1 part of the pipeline was only using tasks,
    and even then very loosely integrated into a "pipeline"
    via the '#! /usr/bin/env casarun' construct.



API for tool and GUI -- these are the API for actual tools that do the
    work and the GUI. What does the interface look like?
    How does the GUI interact with the lower layers? How
    can the GUI interact with CASA Viewer?


to produce:
- overall structure, 
- functional requirements, 
- use cases to be allowed. 


peter:
  - study VLA/ALMA pipeline
    VLA:   Claire/Bryan

  - study Chad Hull's "pr" for TADPOL

  - casaviewer interaction options

  - datasplash re-use? expansion?

doug?
  - assuming we have an ADMIT infrastructure that puts an 'azip' in a P/S/B hierarchy,
    we need something to deal with datamining the various P's:

  - setup a meta-project (MP) based on either all P's that have valid azip's, or use 
    a complex query that goes into each Project and either selects or deselects.
    Manual creation is perfectly ok as well :-)
    We need some use cases here. 
    - select based on a specific line (L) present
    - select based on a source name
    - select based on a previously set user supplied keyword (on what level?)

  - MP needs to have some record how it was created
  
  - Re-run one more more MPs based on a procedure established in one P ?

  - Data Mining operations in MPs?
    - acumulate things you did in a P into an MP
      - e.g. clump spectrum to gain statistics
    - extract things from a P (or do we need to distinguish P from P/S or P/S/B or P/S/L)
      and stuff them in python data structures for any plotting or linked data analysis/vis
      MatplotLib
      ?Should we use GLUE as our standard example to visualize?

  
notes:

  - buildmytasks
    Naming convention:
        task_foobar.py
        foobar.xml
    Generated are:
        foobar.py  (!!!  by XLST)

  - cyclic graph is needed to figure out the dependancies

  - the XML key description is undergoing a revision, Wes Young
    (although in Taiwan) is leading this.
    e.g.

    <param>
       <shortdescription>
       <description>

  - CASA task  :  foobar.xml

    <casaxml>
    <task type="function" name="foobar" category="fumbar">
      <shortdescription>
      <description>
      <input>
	<param>
	  <description>
	  <any>
	  <value>
      <returns>
      <example>
	  	  


- XML tree

  <project name=cx123>
     <summary>
        bla bla
	<atask name=summary>


- Outline of the XML tree   

   * at_asummary creates an initial summary and distributes those in that hierarchy in 3 levels!)
   * [NP] means this item can occur NP times, otherwise just once. Important for dependancies

  Project(name)[NP]
     Summary
	<atask name=at_summary>
     Source(name)[NS]
        Summary
	   ra,dec,vlsr,....
	   <atask name=at_summary>
        Band(number)[NB]
	   File:im
	   Summary
		FreqMin,FreqMax,FreqStep
	   CubeStats:tab
	      <atask name=at_cubestats>
	      <dep>
	        File:im
	   LineList:tab
	      <atask name=at_band2line>
	      <dep>
		CubeStats
	LineList:tab
	   <atask name=at_linemerge>
	   <dep>
	     band[NB].LineList
	Line(name)[NL]
	   LineCube:im
	      <atask name=at_reframe>
	      <dep>
	        LineList
	   RMS (since cubestats can differ per channel)
	   Mom0:im
	      <atask name=at_moment>
	      <dep>
	        LineCube
	   Mom1:im
	   Mom2:im
	   PeakSpectrum:tab
	      <summary>
		Peak, RMS, V0, FWHM, SdV
	      <atask name=at_spectrum>
	      <dep>
	        LineCube
	   IntegratedSpectrum:tab
	      <summary>
	        Peak, RMS, V0, FWHM, SdV
	      <atask name=at_spectrum>
	      <dep>
	        LineCube



- The work needed also fits in a Makefile actually....
  


p1_s1_l1_mom0:		p1_s1_l1_linecube

p1_s1_l1_linecube:	p1_s1_linelist p1_s1_b1

p1_s1_linelist:		p1_s1_b1_linelist p1_s1_b2_linelist p1_s1_b3_linelist p1_s1_b4_linelist
			at_linemerge

p1_s1_b1_linelist:	p1_s1_b1
			at_band2line

p1_s1_b1:		file:im
			at_archive(p1,s1,b1)

p1_summary:
			at_summary
	
